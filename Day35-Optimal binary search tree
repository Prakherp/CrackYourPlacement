int optimalSearchTree(int keys[], int freq[], int n)
    {
        // code here
        vector<vector<int>> dp(n, vector<int>(n,0));
        vector<int> pre_sum(n,0);
        for(int i=0;i<n;i++){
            dp[i][i]=freq[i];
            pre_sum[i]+=freq[i];
            if(i>0)
                pre_sum[i]+=pre_sum[i-1];
        }
        
        
        for(int len=1;len<n;len++){
            for(int i=0;i<n-len;i++){
                int j=i+len;
                int temp=INT_MAX;
                for(int k=i;k<=j;k++){
                    int t=0;
                    if(k-1>=i){
                        t+=dp[i][k-1];
                    }
                    if(k+1<=j)
                        t+=dp[k+1][j];
                    
                    temp=min(temp,t);
                }
                dp[i][j]=temp+(pre_sum[j]- (i>0 ? pre_sum[i-1]: 0));
            }
        }
        return dp[0][n-1];
    }
