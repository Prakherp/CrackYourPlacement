int leastInterval(vector<char>& tasks, int n) {
        vector<int> cnt(26,0);
        for(int i=0;i<tasks.size();i++){
            cnt[tasks[i]-'A']++;
        }
        priority_queue<pair<int,char>> pq;
        for(int i=0;i<26;i++){
            if(cnt[i]>0){
                pq.push({cnt[i],(char)(i+65)});
            }
        }
        int max_f=pq.top().first;
        int idles=(max_f-1)*n;
        int intervals=max_f+idles;
        int max_to_allot=max_f-1;
        pq.pop();
        while(!pq.empty()){
            int curr_f=pq.top().first;
            pq.pop();
            if(curr_f==max_f){
                intervals+=1;
                curr_f-=1;
            }
            if(idles>=curr_f){
                idles-=curr_f;
            }
            else{
                intervals+=(curr_f-idles);
                idles=0;
            }
        }
        return intervals;
    }
