 int dx[8]={-1,-1,1,1,-2,-2,2,2};
    int dy[8]={2,-2,2,-2,1,-1,1,-1};
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    // Code here
	    vector<vector<bool>> vis(N, vector<bool>(N,false));
	    queue<pair<int,int>> q;
	    q.push({KnightPos[0]-1,KnightPos[1]-1});
	    vis[KnightPos[0]-1][KnightPos[1]-1]=true;
	    int steps=0;
	    while(!q.empty()){
	        int n=q.size();
	        while(n--){
    	        int x=q.front().first;
    	        int y=q.front().second;
    	        q.pop();
    	        if(x==TargetPos[0]-1 && y==TargetPos[1]-1){
                    return steps;
                }
    	        for(int i=0;i<8;i++){
    	            int nx=x+dx[i];
                    int ny=y+dy[i];
                    if(nx>=0 && nx<N && ny>=0 && ny<N && !vis[nx][ny]){
                        vis[nx][ny]=true;
                        q.push({nx,ny});
                    } 
    	        }
	        }
	        steps++;
	    }
	    return -1;
	}
