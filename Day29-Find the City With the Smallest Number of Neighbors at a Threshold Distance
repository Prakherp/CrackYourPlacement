int bfs(vector<vector<pair<int,int>>>& adj_list, int n, int thresh, int curr){
        queue<pair<int,int>> q;
        vector<int> vis(n,-1);
        q.push({curr,0});
        vis[curr]=0;
        int res=0;
        while(!q.empty()){
            int sz= q.size();
            while(sz--){
                int t=q.front().first;
                int dist=q.front().second;
                q.pop();
                for(int i =0;i<adj_list[t].size();i++){
                    if((vis[adj_list[t][i].first]==-1 && dist+adj_list[t][i].second<=thresh) || (vis[adj_list[t][i].first]!=-1 && vis[adj_list[t][i].first]>dist+adj_list[t][i].second )){  
                        if(vis[adj_list[t][i].first]==-1)
                            res++;
                        vis[adj_list[t][i].first]=dist+adj_list[t][i].second;
                        q.push({adj_list[t][i].first,dist+adj_list[t][i].second});
                    }
                }
            }
        }
        return res;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<pair<int,int>>> adj_list(n);
        for(int i=0;i<edges.size();i++){
            adj_list[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            adj_list[edges[i][1]].push_back({edges[i][0],edges[i][2]});
        }

        int temp=INT_MAX, res;
        for(int i=0;i<n;i++){
            int x= bfs(adj_list, n, distanceThreshold, i);
            if(x<=temp){
                res=i;
                temp=x;
            }
        }
        return res;

    }
