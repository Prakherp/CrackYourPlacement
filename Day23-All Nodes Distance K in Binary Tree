vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parent;
        queue<TreeNode*> q;
        parent[root]=NULL;
        q.push(root);
        TreeNode* req=NULL;
        while(!q.empty()){
            TreeNode* temp=q.front();
            if(temp==target)
                req=temp;
            q.pop();
            if(temp->left){
                parent[temp->left]=temp;
                q.push(temp->left);
            }     
            if(temp->right){
                parent[temp->right]=temp;
                q.push(temp->right);
            }
        }
        vector<int> ans;
        unordered_map<TreeNode*, bool> visited;
        queue<pair<TreeNode*,int> > backtrack;
        backtrack.push({req,0});
        cout<<req->val<<endl;
        visited[req]=true;
        while(!backtrack.empty()){
            TreeNode* temp=backtrack.front().first;
            int dist=backtrack.front().second;
            backtrack.pop();
            if(dist==k){
                ans.push_back(temp->val);
            }
            else{
                if(temp->left && visited.find(temp->left)==visited.end()){
                    backtrack.push({temp->left,dist+1});
                    visited[temp->left]=true;
                }
                if(temp->right && visited.find(temp->right)==visited.end()){
                    backtrack.push({temp->right,dist+1});
                    visited[temp->right]=true;
                }
                if(parent[temp] && visited.find(parent[temp])==visited.end()){
                    backtrack.push({parent[temp],dist+1});
                    visited[parent[temp]]=true;
                }
            }
        }
        return ans;
    }
